configurations {
    mains
    tests
}

dependencies {
    compile("junit:junit:${project.property('junit.version')}") {
        exclude module: 'hamcrest-core'
    }
    compile "org.hamcrest:hamcrest-all:${project.property('hamcrest.version')}"
    testCompile "org.assertj:assertj-core:${project.property('assertj.version')}"
}

afterEvaluate {
    compileJava {
        inputs.property("moduleName", 'org.xbib.elasticsearch.randomizedtesting')
        doFirst {
            options.compilerArgs = [
                    '--module-path', classpath.asPath
            ]
            classpath = files()
        }
    }
    compileTestJava {
        inputs.property("moduleName", 'org.xbib.elasticsearch.randomizedtesting.test')
        doFirst {
            options.compilerArgs = [
                    '--module-path', classpath.asPath
            ]
            classpath = files()
        }
    }
    test {
        dependsOn 'jar', 'testJar'
        doFirst {
            classpath = files(configurations.testRuntime) + configurations.mains.artifacts.files + configurations.tests.artifacts.files
            jvmArgs = [
                    '--module-path', classpath.asPath,
                    '--add-modules', 'org.xbib.elasticsearch.randomizedtesting',
                    '--add-modules', 'org.xbib.elasticsearch.randomizedtesting.test'
            ]
            scanForTestClasses = false
            exclude '**/Test*$*'
            include '**/Test*.class'
        }
    }
    javadoc {
        inputs.property("moduleName", 'org.xbib.elasticearch.randomizedtesting')
        doFirst {
            options.addStringOption('-module-path', classpath.asPath)
            classpath = files()
        }
    }
}

task javadocJar(type: Jar) {
    from javadoc
    classifier 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier 'sources'
}

task testJar(type: Jar) {
    group = 'build'
    from sourceSets.test.output
    classifier 'tests'
}

artifacts {
    mains jar
    tests testJar
    archives sourcesJar, javadocJar, testJar
}
