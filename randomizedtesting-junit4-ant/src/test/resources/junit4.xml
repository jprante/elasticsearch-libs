
<project name="junit4" default="statuses" xmlns:junit4="antlib:com.carrotsearch.ant.tasks.junit4">
    <property name="native.libs" location="${basedir}/../src/test/native" />

    <path id="junit.modulepath">
        <fileset dir="libs">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="tests.modulepath">
        <path location="." />
        <path refid="junit.modulepath" />
    </path>

    <taskdef uri="antlib:com.carrotsearch.ant.tasks.junit4">
        <classpath refid="junit.modulepath" />
    </taskdef>

    <presetdef name="junit4.preconf">
        <junit4:junit4 haltonfailure="true" parallelism="1" shuffleOnSlave="true" onNonEmptyWorkDirectory="wipe">
            <modulepath refid="tests.modulepath" />

            <listeners>
                <junit4:report-text 
                    showThrowable="true" 
                    showStackTraces="true" 
                    showOutput="always"

                    showStatusOk="true" 
                    showStatusError="true" 
                    showStatusFailure="true" 
                    showStatusIgnored="true"

                    showSuiteSummary="true" 
                />
            </listeners>
        </junit4:junit4>
    </presetdef>

    <!-- Targets below are connected with test cases. -->
    <target name="sourcesuites">
        <junit4.preconf>
            <fileset dir="${basedir}/../src/test/java">
                <include name="**/TestSuccess.java" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="sysstreams">
        <junit4.preconf>
            <fileset dir="${basedir}">
                <include name="**/TestSysstreams.class" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="nojunit">
        <junit4:junit4 onNonEmptyWorkDirectory="wipe">
            <fileset dir="${basedir}">
                <include name="**/TestSysstreams.class" />
            </fileset>
        </junit4:junit4>
    </target>

    <target name="oldjunit">
        <junit4:junit4 onNonEmptyWorkDirectory="wipe">
            <modulepath>
                <path location="." />
                <fileset dir="${basedir}" includes="lib/junit*.jar" />
            </modulepath>
            <fileset dir="${basedir}">
                <include name="**/TestStatuses.class" />
            </fileset>
        </junit4:junit4>
    </target>

    <target name="statuses">
        <junit4.preconf debugstream="true">
            <fileset dir="${basedir}">
                <include name="**/TestStatuses.class" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="ignoredSuite">
        <junit4.preconf>
            <fileset dir="${basedir}">
                <include name="**/TestIgnoredSuite.class" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="beforeClassError">
        <junit4.preconf>
            <fileset dir="${basedir}">
                <include name="**/TestBeforeClassError.class" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="afterClassError">
        <junit4.preconf>
            <fileset dir="${basedir}">
                <include name="**/TestAfterClassError.class" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="hierarchicalSuiteDescription">
        <junit4.preconf>
            <fileset dir="${basedir}">
                <include name="**/TestHierarchicalSuiteDescription.class" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="dir">
        <delete dir="empty" failonerror="false" />
        <mkdir dir="empty" />

        <junit4.preconf dir="empty" leaveTemporary="true">
            <fileset dir="${basedir}">
                <include name="**/TestDir.class" />
            </fileset>
        </junit4.preconf>

        <fail message="Expected marker file to appear at ${basedir}/empty/S0/touch.me">
            <condition>
                <not>
                    <available file="empty/J0/touch.me" type="file" />
                </not>
            </condition>
        </fail>

        <junit4.preconf dir="empty" isolateWorkingDirectories="false">
            <fileset dir="${basedir}">
                <include name="**/TestDir.class" />
            </fileset>
        </junit4.preconf>

        <fail message="Expected marker file to appear.">
            <condition>
                <not>
                    <available file="empty/touch.me" type="file" />
                </not>
            </condition>
        </fail>
    </target>

    <target name="onNonEmptyWorkDirectory-fail">
        <delete dir="empty" failonerror="false" />
        <touch file="empty/J0/existing-dir/garbage.txt" mkdirs="true" />

        <!-- the default behavior (fail) -->
        <junit4.preconf dir="empty" onNonEmptyWorkDirectory="fail">
            <fileset dir="${basedir}">
                <include name="**/TestDir.class" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="onNonEmptyWorkDirectory-wipe">
      <delete dir="empty" failonerror="false" />
      <touch file="empty/J0/existing-dir/garbage.txt" mkdirs="true" />

      <junit4.preconf dir="empty" leaveTemporary="false" onNonEmptyWorkDirectory="wipe">
          <fileset dir="${basedir}">
              <include name="**/TestDir.class" />
          </fileset>
      </junit4.preconf>

      <fail message="Expected garbage file to be deleted.">
          <condition>
            <available file="empty/J0/existing-dir" type="dir" />
          </condition>
      </fail>
    </target>

    <target name="onNonEmptyWorkDirectory-ignore">
      <delete dir="empty" failonerror="false" />
      <touch file="empty/J0/existing-dir/garbage.txt" mkdirs="true" />

      <junit4.preconf dir="empty" leaveTemporary="true" onNonEmptyWorkDirectory="ignore">
        <fileset dir="${basedir}">
            <include name="**/TestDir.class" />
        </fileset>
      </junit4.preconf>

      <fail message="Expected garbage file to stay untouched.">
        <condition>
          <not>
            <available file="empty/J0/existing-dir/garbage.txt" type="file" />
          </not>
        </condition>
      </fail>
    </target>

    <target name="onNonEmptyWorkDirectory-tmpDirUnderCwd">
      <delete dir="empty" failonerror="false" />
      <mkdir  dir="empty/J0/temp" />
      <mkdir dir="./temp" />

      <junit4.preconf dir="empty"
                      tempdir="./temp-junit4"
                      leaveTemporary="true"
                      onNonEmptyWorkDirectory="wipe">

        <sysproperty key="java.io.tmpdir" value="./temp" />

        <fileset dir="${basedir}">
          <include name="**/TestCreateTmpFile.class" />
        </fileset>
      </junit4.preconf>
    </target>

    <target name="maxmem">
        <junit4.preconf maxmemory="100m">
            <fileset dir="${basedir}">
                <include name="**/TestMaxMem.class" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="jvmarg">
        <junit4.preconf>
            <jvmarg value="-Xmx100m" />
            <jvmarg value="-Dtest.param=foobar" />

            <fileset dir="${basedir}">
                <include name="**/TestMaxMem.class" />
                <include name="**/TestJvmArg.class" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="sysproperty">
        <junit4.preconf>
            <sysproperty key="test.param" value="foobar" />

            <fileset dir="${basedir}">
                <include name="**/TestJvmArg.class" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="env">
        <junit4.preconf>
            <env key="env.variable" value="foobar" />

            <fileset dir="${basedir}">
                <include name="**/TestEnvVar.class" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="failureProperty">
        <junit4.preconf haltonfailure="false">
            <fileset dir="${basedir}">
                <include name="**/TestStatuses.class" />
            </fileset>
        </junit4.preconf>

        <junit4.preconf haltonfailure="false" failureProperty="tests.failed">
            <fileset dir="${basedir}">
                <include name="**/TestStatuses.class" />
            </fileset>
        </junit4.preconf>

        <fail message="Expected failure property to be set.">
            <condition>
                <not>
                    <isset property="tests.failed" />
                </not>
            </condition>
        </fail>
    </target>

    <target name="failureTypePassing">
        <junit4.preconf haltonfailure="false">
            <fileset dir="${basedir}">
                <include name="**/TestFailureTypePassing.class" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="jvmcrash">
        <echo>${native.libs}</echo>
        <junit4.preconf jvmOutputAction="pipe,fail">
            <jvmarg value="-Djava.library.path=${native.libs}" />

            <fileset dir="${basedir}">
                <include name="**/TestJvmCrash.class" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="antxml">
        <delete dir="ant-xmls" failonerror="false" />
        <mkdir dir="ant-xmls" />

        <junit4:junit4 
          onNonEmptyWorkDirectory="wipe"
            haltonfailure="false" 
            uniqueSuiteNames="false"
            parallelism="3">

            <modulepath refid="tests.modulepath" />

            <listeners>
                <junit4:report-ant-xml dir="ant-xmls">
                    <!--
                    <tokenfilter>
                      <replaceregex pattern="" replace="" flags="gi" />
                    </tokenfilter>
                    -->
                </junit4:report-ant-xml>
            </listeners>

            <fileset dir="${basedir}">
                <include name="**/TestStatuses.class" />
                <include name="**/TestSysstreams.class" />
                <include name="**/TestIgnoredSuite.class" />
                <include name="**/TestBeforeClassError.class" />
                <include name="**/TestHierarchicalSuiteDescription.class" />
                <include name="**/TestInvalidUtfCharacter.class" />
                <include name="**/TestSuiteReplicated.class" />
            </fileset>
        </junit4:junit4>
    </target>

    <target name="antxml-summary">
      <delete dir="ant-xmls2" failonerror="false" />
      <mkdir dir="ant-xmls2" />

      <junit4:junit4 haltonfailure="false" onNonEmptyWorkDirectory="wipe">
          <modulepath refid="tests.modulepath" />

          <listeners>
              <junit4:report-ant-xml dir="ant-xmls2" summaryFile="ant-xmls2/summary1.xml">
              </junit4:report-ant-xml>
          </listeners>

          <fileset dir="${basedir}">
              <include name="**/TestStatuses.class" />
              <include name="**/TestIgnoredSuite.class" />
          </fileset>
      </junit4:junit4>

      <junit4:junit4 haltonfailure="false" onNonEmptyWorkDirectory="wipe">
          <modulepath refid="tests.modulepath" />

          <listeners>
              <junit4:report-ant-xml dir="ant-xmls2" summaryFile="ant-xmls2/summary2.xml">
              </junit4:report-ant-xml>
          </listeners>

          <fileset dir="${basedir}">
              <include name="**/TestSuccess.class" />
          </fileset>
      </junit4:junit4>
      
      <junit4:junit4 haltonfailure="false" onNonEmptyWorkDirectory="wipe">
          <modulepath refid="tests.modulepath" />

          <listeners>
              <junit4:report-ant-xml dir="ant-xmls2" summaryFile="ant-xmls2/summary3.xml">
              </junit4:report-ant-xml>
          </listeners>

          <fileset dir="${basedir}">
              <include name="**/TestIgnoredSuite.class" />
          </fileset>
      </junit4:junit4>      
    </target>

    <target name="json">
        <delete dir="json" failonerror="false" />
        <mkdir dir="json" />

        <junit4:junit4 haltonfailure="false" onNonEmptyWorkDirectory="wipe">
            <modulepath refid="tests.modulepath" />

            <listeners>
                <junit4:report-json file="json/report.json" />
                <junit4:report-json jsonpMethod="callbackMethod" file="json/report.jsonp" />
                <junit4:report-json file="json/output.html" projectName="Nice project" />
            </listeners>

            <fileset dir="${basedir}">
                <include name="**/TestStatuses.class" />
                <include name="**/TestSysstreams.class" />
                <include name="**/TestIgnoredSuite.class" />
                <include name="**/TestBeforeClassError.class" />
                <include name="**/TestHierarchicalSuiteDescription.class" />
                <include name="**/EscapeSequences.class" />
            </fileset>
        </junit4:junit4>
    </target>

    <target name="classfilter">
        <local name="tests.class" />
        <property name="tests.class" value="*Statuses" />
        <junit4.preconf haltonfailure="false">
            <fileset dir="${basedir}">
                <include name="**/donotexecute/Test*.class" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="methodfilter">
        <local name="tests.class" />
        <local name="tests.method" />
        <property name="tests.class" value="*Statuses" />
        <property name="tests.method" value="ignored*" />
        <junit4.preconf haltonfailure="false">
            <fileset dir="${basedir}">
                <include name="**/donotexecute/Test*.class" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="filterexpression">
        <echo>${basedir}</echo>
        <junit4.preconf haltonfailure="false">
            <sysproperty key="tests.filter" value="@foo and not @bar" />

            <fileset dir="${basedir}">
                <include name="**/TestFilteringExpressions$Example*.class" />
            </fileset>

            <listeners>
                <junit4:report-text />
            </listeners>
        </junit4.preconf>
    </target>

    <target name="nojunit-task">
        <taskdef name="junit4-nojunit" classname="com.carrotsearch.ant.tasks.junit4.JUnit4">
            <modulepath>
                <fileset refid="fileset.junit4" />
            </modulepath>
        </taskdef>

        <junit4-nojunit>
            <modulepath refid="tests.modulepath" />
            <fileset dir="${basedir}">
                <include name="**/TestStatuses.class" />
            </fileset>
        </junit4-nojunit>
    </target>

    <target name="oldjunit-task">
        <taskdef name="junit4-oldjunit" classname="com.carrotsearch.ant.tasks.junit4.JUnit4">
            <modulepath>
                <fileset dir="../..">
                    <include name="lib/junit-4.9.jar" />
                </fileset>
                <fileset refid="fileset.junit4" />
            </modulepath>
        </taskdef>

        <junit4-oldjunit>
            <modulepath refid="tests.modulepath" />
            <fileset dir="${basedir}">
                <include name="**/TestStatuses.class" />
            </fileset>
        </junit4-oldjunit>
    </target>

    <target name="escaping">
        <delete dir="empty" failonerror="false" />
        <mkdir dir="empty" />

        <junit4.preconf dir="empty">
            <sysproperty key="sysprop.key" value="${nonexistent-1}" />
            <sysproperty key="sysprop.key2" value="abc def" />
            <jvmarg value="-Dsysprop.key3=%PATH%" />
            <env key="env.variable" value="${nonexistent-3}" />

            <fileset dir="${basedir}">
                <include name="**/TestEscaping.class" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="seedpassing">
        <junit4.preconf seed="[DEADBEEF:CAFEBABE]">
            <fileset dir="${basedir}">
                <include name="**/TestSeedPassing.class" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="seedpassing.invalid">
        <junit4.preconf seed="invalid">
            <fileset dir="${basedir}">
                <include name="**/TestSeedPassing.class" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="reproducestring">
        <junit4.preconf haltonfailure="false">
            <fileset dir="${basedir}">
                <include name="**/TestReproduceString.class" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="assertions">
        <junit4.preconf>
            <fileset dir="${basedir}">
                <include name="**/sub1/TestAssertions.class" />
            </fileset>

            <assertions>
                <enable package="com.carrotsearch.ant.tasks.junit4.test.donotexecute.sub1" />
            </assertions>
        </junit4.preconf>
    </target>

    <target name="balancing">
        <delete dir="${basedir}" includes="hints*.log" excludes="hints-fixed.log" />
        <junit4.preconf parallelism="2">
            <fileset dir="${basedir}">
                <include name="**/sub2/Test*.class" />
            </fileset>

            <listeners>
                <junit4:report-execution-times file="${basedir}/hints.log" historyLength="5" />
            </listeners>

            <balancers>
                <junit4:execution-times>
                    <fileset dir="${basedir}/resources/test" includes="hints-fixed.log" />
                </junit4:execution-times>
            </balancers>
        </junit4.preconf>

        <fail message="Expected hints file to appear.">
            <condition>
                <not>
                    <available file="${basedir}/hints.log" type="file" />
                </not>
            </condition>
        </fail>
    </target>

    <target name="balancing_nohints">
        <junit4.preconf parallelism="2">
            <fileset dir="${basedir}">
                <include name="**/sub2/Test*.class" />
            </fileset>

            <balancers>
                <junit4:execution-times>
                    <fileset dir="${basedir}" includes="nohints*.log" />
                </junit4:execution-times>
            </balancers>
        </junit4.preconf>
    </target>

    <target name="alt-vendor">
        <fail unless="jvm.exec">jvm.exec property must be set.</fail>
        <junit4.preconf parallelism="1" leaveTemporary="true" jvm="${jvm.exec}">
            <fileset dir="${basedir}">
                <include name="**/TestStatuses.class" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="notaclass">
        <junit4.preconf>
            <fileset dir="${basedir}">
                <include name="**/junit4.xml" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="notinstantiable">
        <junit4.preconf>
            <fileset dir="${basedir}">
                <include name="**/NotInstantiable.class" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="customprefix">
        <local name="blah.class" />
        <property name="blah.class" value="*Statuses" />
        <property name="blah.seed" value="deadbeef" />
        <junit4.preconf haltonfailure="false" prefix="blah">
            <fileset dir="${basedir}">
                <include name="**/donotexecute/Test*.class" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="cwdconflict">
        <junit4.preconf haltonfailure="true" parallelism="2">
            <fileset dir="${basedir}">
                <include name="**/CwdConflict*.class" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="slavehanging">
        <junit4.preconf haltonfailure="false" parallelism="1">
            <fileset dir="${basedir}">
                <include name="**/SlaveHanging*.class" />
                <exclude name="**/*$*" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="outofordersysouts">
        <junit4.preconf haltonfailure="true" parallelism="1">
            <fileset dir="${basedir}">
                <include name="**/OutOfOrderSysouts.class" />
                <exclude name="**/*$*" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="mergehints">
        <junit4.preconf parallelism="4">
            <fileset dir="${basedir}">
                <include name="**/sub2/Test*.class" />
            </fileset>

            <listeners>
                <junit4:report-execution-times file="${basedir}/hints-1.log" />
                <junit4:report-execution-times file="${basedir}/hints-2.log" />
                <junit4:report-execution-times file="${basedir}/hints-3.log" />
            </listeners>
        </junit4.preconf>

        <junit4:mergehints file="${basedir}/hints-merged.log" historyLength="3">
            <fileset dir="${basedir}" includes="hints-?.log" />
        </junit4:mergehints>

        <junit4:tophints max="3">
            <fileset dir="${basedir}" includes="hints-merged.log" />
        </junit4:tophints>
    </target>

    <target name="staticScopeOutput">
        <junit4:junit4 onNonEmptyWorkDirectory="wipe">
            <modulepath refid="tests.modulepath" />

            <fileset dir="${basedir}">
                <include name="**/TestStaticScopeOutput.class" />
            </fileset>

            <listeners>
                <junit4:report-text />
                <junit4:report-json file="json/static-scope.json" />
            </listeners>
        </junit4:junit4>
    </target>

    <target name="iters">
        <junit4.preconf haltonfailure="true">
            <sysproperty key="tests.iters" value="5" />
            <fileset dir="${basedir}">
                <include name="**/TestSuccess.class" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="junitcompat1">
        <junit4.preconf fork="true" forkmode="once" haltonerror="true" errorproperty="dummy" filtertrace="yes" timeout="60" includeantruntime="true" showoutput="yes" outputtoformatters="true" reloading="true" clonevm="true" logfailedtests="true" enableTestListenerEvents="true">
            <formatter type="plain" />
        </junit4.preconf>
    </target>

    <target name="junitcompat2">
        <junit4.preconf>
            <test name="my.test.TestCase" haltonfailure="no" outfile="result">
                <formatter type="xml" />
            </test>

            <batchtest fork="yes" todir="${reports.tests}">
                <fileset dir="${src.tests}">
                    <include name="**/*Test*.java" />
                    <exclude name="**/AllTests.java" />
                </fileset>
            </batchtest>
        </junit4.preconf>
    </target>

    <target name="junitcompat3">
        <junit4.preconf>
            <batchtest fork="yes" todir="${reports.tests}">
                <fileset dir="${src.tests}">
                    <include name="**/*Test*.java" />
                    <exclude name="**/AllTests.java" />
                </fileset>
            </batchtest>
        </junit4.preconf>
    </target>

    <target name="suiteerror">
        <junit4:junit4 haltonfailure="false" onNonEmptyWorkDirectory="wipe">
            <modulepath refid="tests.modulepath" />

            <listeners>
                <junit4:report-text showStatusOk="false" />
            </listeners>

            <fileset dir="${basedir}">
                <include name="**/FailInAfterClass.class" />
            </fileset>
        </junit4:junit4>
    </target>

    <target name="reasonForSuiteAssumptionIgnored">
        <junit4:junit4 onNonEmptyWorkDirectory="wipe">
            <modulepath refid="tests.modulepath" />

            <fileset dir="${basedir}">
                <include name="**/ReasonForAssumptionIgnored$*.class" />
            </fileset>

            <listeners>
                <junit4:report-text />
            </listeners>
        </junit4:junit4>
    </target>

    <target name="reasonForIgnored">
        <junit4:junit4 onNonEmptyWorkDirectory="wipe">
            <modulepath refid="tests.modulepath" />

            <fileset dir="${basedir}">
                <include name="**/ReasonForIgnored$*.class" />
            </fileset>

            <listeners>
                <junit4:report-text />
            </listeners>
        </junit4:junit4>
    </target>

    <target name="reasonForIgnoredByDisabledGroup">
        <junit4:junit4 onNonEmptyWorkDirectory="wipe">
            <modulepath refid="tests.modulepath" />

            <fileset dir="${basedir}">
                <include name="**/ReasonForIgnoredByDisabledGroup.class" />
            </fileset>

            <listeners>
                <junit4:report-text />
            </listeners>
        </junit4:junit4>
    </target>
    
    

    <target name="jvmverbose">
        <junit4:junit4 haltonfailure="false" onNonEmptyWorkDirectory="wipe">
            <modulepath refid="tests.modulepath" />

            <jvmarg value="-verbose:class" />
            <jvmarg value="-verbose:gc" />

            <fileset dir="${basedir}">
                <include name="**/TestStatuses.class" />
            </fileset>

            <listeners>
                <junit4:report-text />
            </listeners>
        </junit4:junit4>
    </target>

    <target name="sysouts">
        <junit4:junit4 sysouts="true" jvmoutputaction="pipe,ignore" onNonEmptyWorkDirectory="wipe">
            <modulepath refid="tests.modulepath" />

            <jvmarg value="-verbose:class" />

            <fileset dir="${basedir}">
                <include name="**/TestSysstreams.class" />
            </fileset>
        </junit4:junit4>
    </target>

    <target name="weirdclasses">
        <junit haltonfailure="false" haltonerror="false" printsummary="false" showoutput="false"
               filtertrace="false" fork="true">
            <modulepath refid="tests.modulepath" />
            <batchtest>
                <formatter type="plain" usefile="false" />
                <fileset dir="${basedir}/../src/test/java" includes="**/bad/*.java" />
            </batchtest>
        </junit>
    </target>

    <target name="listeners">
        <junit4:junit4 haltonfailure="false" onNonEmptyWorkDirectory="wipe">
            <modulepath refid="tests.modulepath" />

            <fileset dir="${basedir}">
                <include name="**/SuiteListeners.class" />
            </fileset>

            <listeners>
                <junit4:report-text />
            </listeners>
        </junit4:junit4>
    </target>

    <target name="singleUserDefinedRunListener">
        <junit4:junit4 haltonfailure="false" onNonEmptyWorkDirectory="wipe">
            <modulepath refid="tests.modulepath" />

            <fileset dir="${basedir}">
                <include name="**/TestSuccess.class" />
            </fileset>

            <listeners>
                <junit4:report-text />
            </listeners>

            <runlisteners>
                <junit4:run-listener className="com.carrotsearch.ant.tasks.junit4.test.runlisteners.UserDefinedRunListener1" />
            </runlisteners>
        </junit4:junit4>
    </target>

    <target name="multipleUserDefinedRunListeners">
        <junit4:junit4 haltonfailure="false" onNonEmptyWorkDirectory="wipe">
            <modulepath refid="tests.modulepath" />

            <fileset dir="${basedir}">
                <include name="**/TestSuccess.class" />
            </fileset>

            <listeners>
                <junit4:report-text />
            </listeners>

            <runlisteners>
                <junit4:run-listener className="com.carrotsearch.ant.tasks.junit4.test.runlisteners.UserDefinedRunListener2" />
                <junit4:run-listener className="com.carrotsearch.ant.tasks.junit4.test.runlisteners.UserDefinedRunListener3" />
            </runlisteners>
        </junit4:junit4>
    </target>
  
    <target name="syspropertyset">
        <junit4:junit4 haltonfailure="false" onNonEmptyWorkDirectory="wipe">
            <modulepath refid="tests.modulepath" />
    
            <fileset dir="${basedir}">
                <include name="**/SysPropertySets.class" />
            </fileset>

            <listeners>
                <junit4:report-text />
            </listeners>
            
            <syspropertyset>
                <propertyref prefix="prefix" />
            </syspropertyset>
        </junit4:junit4>
    </target>
  
    <target name="randomsysproperty">
        <!-- Fix the master seed in advance to allow repeatable selection of attributes. -->
        <local name="tests.seed" />
        <junit4:pickseed property="tests.seed" />

        <junit4:pickfromlist property="prefix.dummy1" allowundefined="false" seed="${tests.seed}">
            <value>UTF-8</value>
            <value>UTF-16</value>
            <value>US-ASCII</value>
            <value>iso8859-1</value>
        </junit4:pickfromlist>

        <junit4:pickfromlist property="prefix.dummy2" allowundefined="false" seed="${tests.seed}">
            <value>UTF-8</value>
            <value><!-- Empty for ignored property. --></value>
            <value><!-- Empty for ignored property. --></value>
            <value><!-- Empty for ignored property. --></value>
        </junit4:pickfromlist>

        <junit4:junit4 haltonfailure="false" seed="${tests.seed}" onNonEmptyWorkDirectory="wipe">
            <modulepath refid="tests.modulepath" />

            <fileset dir="${basedir}">
                <include name="**/RandomSysProperty.class" />
            </fileset>

            <listeners>
                <junit4:report-text />
            </listeners>

            <sysproperty key="prefix.dummy1" value="${prefix.dummy1}" ignoreEmpty="true" />
            <sysproperty key="prefix.dummy2" value="${prefix.dummy2}" ignoreEmpty="true" />

            <!--
            It'd be nicest to use local refs but they're not working due to: 
            https://issues.apache.org/bugzilla/show_bug.cgi?id=50179
            -->

            <syspropertyset ignoreEmpty="true">
                <propertyref prefix="prefix." />
                <mapper type="glob" from="prefix.*" to="replaced.*" />
            </syspropertyset>
        </junit4:junit4>
    </target>
    
    <target name="fileencodings">
        <macrodef name="check.encoding">
           <attribute name="encoding" />
           <sequential>
              <junit4:junit4 onNonEmptyWorkDirectory="wipe">
                  <modulepath refid="tests.modulepath" />
      
                  <fileset dir="${basedir}">
                      <include name="**/FileEncoding.class" />
                  </fileset>
      
                  <listeners>
                      <!-- Always in UTF-8 -->
                      <junit4:report-text file="${log.file}" append="true" />
                      <!-- Console output, environment-specific but show nonetheless. -->
                      <junit4:report-text />
                  </listeners>
      
                  <sysproperty key="file.encoding" value="@{encoding}" />
              </junit4:junit4>
           </sequential>
        </macrodef>

        <property name="log.file" location="fileencodings.log" />
        <delete file="${log.file}" failonerror="true" />
        <check.encoding encoding="US-ASCII" />
        <check.encoding encoding="iso8859-1" />
        <check.encoding encoding="UTF-8" />
        <check.encoding encoding="UTF-16" />
        <check.encoding encoding="UTF-16LE" />
        <check.encoding encoding="UTF-32" />
    </target>
    
    <target name="testHeartbeat">
        <junit4:junit4 heartbeat="1"  onNonEmptyWorkDirectory="wipe">
            <modulepath refid="tests.modulepath" />

            <fileset dir="${basedir}">
                <include name="**/HeartbeatSlow.class" />
            </fileset>

            <sysproperty key="junit4.tests.internal.initialDelayMs" value="3000" />

            <listeners>
                <junit4:report-text />
            </listeners>
        </junit4:junit4>
    </target>
    
    <target name="timestamps">
        <junit4:junit4 haltonfailure="false"  onNonEmptyWorkDirectory="wipe">
            <modulepath refid="tests.modulepath" />

            <fileset dir="${basedir}">
                <include name="**/TestStatuses.class" />
                <include name="**/TestSuccess.class" />
            </fileset>

            <listeners>
                <junit4:report-text timestamps="true" />
            </listeners>
        </junit4:junit4>
    </target>

    <target name="sysoutsOnSuiteFailure">
        <junit4:junit4 haltonfailure="false"  onNonEmptyWorkDirectory="wipe">
            <modulepath refid="tests.modulepath" />

            <fileset dir="${basedir}">
                <include name="**/SysoutsOnSuiteFailure.class" />
            </fileset>

            <listeners>
                <junit4:report-text />
            </listeners>
        </junit4:junit4>
    </target>

    <target name="sysoutsOnSuiteTimeout">
        <junit4:junit4 haltonfailure="false"  onNonEmptyWorkDirectory="wipe">
            <modulepath refid="tests.modulepath" />

            <fileset dir="${basedir}">
                <include name="**/SysoutsOnSuiteTimeout.class" />
            </fileset>

            <listeners>
                <junit4:report-text showStatusOk="false" />
            </listeners>
        </junit4:junit4>
   </target>

   <target name="sysoutoom">
      <junit4:junit4 onNonEmptyWorkDirectory="wipe" haltonfailure="true" parallelism="2" shuffleOnSlave="true">
          <modulepath refid="tests.modulepath" />

          <fileset dir="${basedir}">
              <include name="**/SysoutOom*.class" />
          </fileset>

          <listeners>
              <junit4:report-text file="${basedir}/large.log" />
              <junit4:report-json file="${basedir}/large.json" outputStreams="no" />
              <junit4:report-ant-xml dir="${basedir}/large.xml" outputStreams="no" />
          </listeners>
      </junit4:junit4>

      <delete includeemptydirs="true">
          <fileset dir="${basedir}">
              <include name="large.*/**" />
          </fileset>
      </delete>
   </target>
   
   <target name="sysouts_passthrough">
      <junit4:junit4 onNonEmptyWorkDirectory="wipe" haltonfailure="true" parallelism="1" shuffleOnSlave="true">
          <modulepath refid="tests.modulepath" />

          <fileset dir="${basedir}">
              <include name="**/SysoutPassthrough.class" />
          </fileset>

          <listeners>
              <junit4:report-text />
          </listeners>
      </junit4:junit4>

      <delete file="${basedir}/large.log" />
   </target>

    <target name="slavemainfailure">
        <junit4.preconf haltonfailure="true">
            <fileset dir="${basedir}">
                <include name="**/FireUnhandledRunnerException.class" />
            </fileset>
        </junit4.preconf>
    </target>

    <target name="suiteduplicate">
        <junit4.preconf parallelism="2" uniqueSuiteNames="false">

            <fileset dir="${basedir}">
                <include name="**/TestSuccess.class" />
            </fileset>
            <fileset dir="${basedir}">
                <include name="**/TestSuccess.class" />
            </fileset>

            <balancers>
                <junit4:execution-times>
                    <fileset dir="${basedir}" includes="hints*.log" />
                </junit4:execution-times>
            </balancers>
        </junit4.preconf>
    </target>

    <target name="duplicateresources">
        <junit4.preconf parallelism="2" uniqueSuiteNames="false">

            <junit4:duplicate times="10">
                <fileset dir="${basedir}">
                    <include name="**/TestSuccess.class" />
                </fileset>
            </junit4:duplicate>
            
            <listeners>
                <junit4:report-text />
            </listeners>           
        </junit4.preconf>
    </target>
    
   <target name="failureslist">
      <junit4:junit4 onNonEmptyWorkDirectory="wipe" haltonfailure="false" parallelism="2" uniqueSuiteNames="false">
          <modulepath refid="tests.modulepath" />

          <junit4:duplicate times="3">
            <fileset dir="${basedir}">
                <include name="**/TestStatuses.class" />
            </fileset>
          </junit4:duplicate>

          <listeners>
              <junit4:report-text showNumFailures="3" />
          </listeners>
      </junit4:junit4>

      <delete file="${basedir}/large.log" />
   </target>
  
   <target name="shutdownhook">
     <junit4.preconf haltonfailure="true">
       <fileset dir="${basedir}">
         <include name="**/ShutdownHook.class" />
       </fileset>
     </junit4.preconf>
  
     <delete file="${basedir}/large.log" />
   </target>
  
   <target name="childvm_sysprops">
     <junit4.preconf>
       <fileset dir="${basedir}">
           <include name="**/ChildVmSysprops.class" />
       </fileset>
     </junit4.preconf>
   </target>

   <target name="oomcode">
      <junit4:junit4 onNonEmptyWorkDirectory="wipe" haltonfailure="true">
          <modulepath refid="tests.modulepath" />

          <fileset dir="${basedir}">
              <include name="**/OomCode.class" />
          </fileset>

          <listeners>
              <junit4:report-text 
                    showThrowable="true" 
                    showStackTraces="true" 
                    showOutput="always"
              />
          </listeners>
      </junit4:junit4>
   </target>
   
   <target name="oompermgen">
      <junit4:junit4 onNonEmptyWorkDirectory="wipe" haltonfailure="true">
          <modulepath refid="tests.modulepath" />

          <fileset dir="${basedir}">
              <include name="**/OomPermGen.class" />
          </fileset>

          <listeners>
              <junit4:report-text 
                    showThrowable="true" 
                    showStackTraces="true" 
                    showOutput="always"
              />
          </listeners>
      </junit4:junit4>
   </target>

  <target name="filtertrace_default">
    <junit4:junit4 onNonEmptyWorkDirectory="wipe" haltonfailure="false">
      <modulepath refid="tests.modulepath" />

      <fileset dir="${basedir}">
        <include name="**/TestStatuses.class" />
      </fileset>

      <listeners>
        <junit4:report-text>
          <junit4:filtertrace>
            <!-- custom filters. 
                <containsstring contains=".SlaveMain." /> 
                <containsregex pattern="^(\s+at )(org\.junit\.)" /> 
             -->
          </junit4:filtertrace>
        </junit4:report-text>
      </listeners>
    </junit4:junit4>
  </target>
  
  <target name="filtertrace_custom">
    <junit4:junit4 onNonEmptyWorkDirectory="wipe" haltonfailure="false">
      <modulepath refid="tests.modulepath" />

      <fileset dir="${basedir}">
        <include name="**/TestStatuses.class" />
      </fileset>

      <listeners>
        <junit4:report-text>
          <junit4:filtertrace defaults="false">
              <containsstring contains=".SlaveMain." /> 
              <containsregex pattern="^(\s+at )(org\.junit\.)" /> 
          </junit4:filtertrace>
        </junit4:report-text>
      </listeners>
    </junit4:junit4>
  </target>
  
  <target name="allFilteredOut">
    <junit4:junit4 onNonEmptyWorkDirectory="wipe" ifNoTests="fail">
      <modulepath refid="tests.modulepath" />

      <fileset dir="${basedir}">
        <include name="**/TestStatuses.class" />
      </fileset>

      <sysproperty key="tests.method" value="-nonexistent-" />
    </junit4:junit4>
  </target>
  
  <target name="oneIgnored">
    <junit4:junit4 onNonEmptyWorkDirectory="wipe" ifNoTests="fail">
      <modulepath refid="tests.modulepath" />

      <fileset dir="${basedir}">
        <include name="**/TestStatuses.class" />
      </fileset>

      <sysproperty key="tests.method" value="ignored" />
    </junit4:junit4>
  </target>
  
  <target name="oneAssumptionIgnored">
    <junit4:junit4 onNonEmptyWorkDirectory="wipe" ifNoTests="fail">
      <modulepath refid="tests.modulepath" />

      <fileset dir="${basedir}">
        <include name="**/TestStatuses.class" />
      </fileset>

      <sysproperty key="tests.method" value="ignored" />
    </junit4:junit4>
  </target>      

  <target name="oneSuccessful">
    <junit4:junit4 onNonEmptyWorkDirectory="wipe" ifNoTests="fail">
      <modulepath refid="tests.modulepath" />

      <fileset dir="${basedir}">
        <include name="**/TestStatuses.class" />
      </fileset>

      <sysproperty key="tests.method" value="ok" />
    </junit4:junit4>
  </target>      

  <target name="oneFailure">
    <junit4:junit4 onNonEmptyWorkDirectory="wipe" ifNoTests="fail">
      <modulepath refid="tests.modulepath" />

      <fileset dir="${basedir}">
        <include name="**/TestStatuses.class" />
      </fileset>

      <sysproperty key="tests.method" value="failure" />
    </junit4:junit4>
  </target>      

  <target name="oneError">
    <junit4:junit4 onNonEmptyWorkDirectory="wipe" ifNoTests="fail">
      <modulepath refid="tests.modulepath" />

      <fileset dir="${basedir}">
        <include name="**/TestStatuses.class" />
      </fileset>

      <sysproperty key="tests.method" value="error" />
    </junit4:junit4>
  </target>      

  <target name="statsProperties">
    <sequential>
      <local name="junit4.stats.tests" />
      <local name="junit4.stats.errors" />
      <local name="junit4.stats.failures" />
      <local name="junit4.stats.ignores" />
      <local name="junit4.stats.suites" />
      <local name="junit4.stats.assumptions" />
      <local name="junit4.stats.suiteErrors" />
      <local name="junit4.stats.nonIgnored" />
      <local name="junit4.stats.successful" />

      <junit4:junit4 onNonEmptyWorkDirectory="wipe" statsPropertyPrefix="junit4.stats" haltonfailure="false">
        <modulepath refid="tests.modulepath" />
  
        <fileset dir="${basedir}">
          <include name="**/TestStatuses.class" />
        </fileset>
      </junit4:junit4>
  
      <echo>
        ${junit4.stats.tests}
        ${junit4.stats.errors}
        ${junit4.stats.failures}
        ${junit4.stats.ignores}
        ${junit4.stats.suites}
        ${junit4.stats.assumptions}
        ${junit4.stats.suiteErrors}
        ${junit4.stats.nonIgnored}
        ${junit4.stats.successful}
      </echo>

      <fail><condition><not><equals arg1="${junit4.stats.tests}"    arg2="5" /></not></condition></fail>
      <fail><condition><not><equals arg1="${junit4.stats.errors}"   arg2="1" /></not></condition></fail>
      <fail><condition><not><equals arg1="${junit4.stats.failures}" arg2="1" /></not></condition></fail>
      <fail><condition><not><equals arg1="${junit4.stats.ignores}"  arg2="1" /></not></condition></fail>
      <fail><condition><not><equals arg1="${junit4.stats.suites}"   arg2="1" /></not></condition></fail>
      <fail><condition><not><equals arg1="${junit4.stats.assumptions}" arg2="1" /></not></condition></fail>
      <fail><condition><not><equals arg1="${junit4.stats.suiteErrors}" arg2="0" /></not></condition></fail>
      <fail><condition><not><equals arg1="${junit4.stats.nonIgnored}"  arg2="3" /></not></condition></fail>
      <fail><condition><not><equals arg1="${junit4.stats.successful}"  arg2="false" /></not></condition></fail>
    </sequential>

    <sequential>
      <local name="junit4.stats.tests" />
      <local name="junit4.stats.errors" />
      <local name="junit4.stats.failures" />
      <local name="junit4.stats.ignores" />
      <local name="junit4.stats.suites" />
      <local name="junit4.stats.assumptions" />
      <local name="junit4.stats.suiteErrors" />
      <local name="junit4.stats.nonIgnored" />
      <local name="junit4.stats.successful" />

      <junit4:junit4 onNonEmptyWorkDirectory="wipe" haltonfailure="false" statsPropertyPrefix="junit4.stats">
        <modulepath refid="tests.modulepath" />
  
        <fileset dir="${basedir}">
          <include name="**/TestStatuses.class" />
        </fileset>
  
        <sysproperty key="tests.method" value="error" />
      </junit4:junit4>
  
      <echo>
        ${junit4.stats.tests}
        ${junit4.stats.errors}
        ${junit4.stats.failures}
        ${junit4.stats.ignores}
        ${junit4.stats.suites}
        ${junit4.stats.assumptions}
        ${junit4.stats.suiteErrors}
        ${junit4.stats.nonIgnored}
        ${junit4.stats.successful}
      </echo>
      
      <fail><condition><not><equals arg1="${junit4.stats.tests}"    arg2="1" /></not></condition></fail>
      <fail><condition><not><equals arg1="${junit4.stats.errors}"   arg2="1" /></not></condition></fail>
      <fail><condition><not><equals arg1="${junit4.stats.failures}" arg2="0" /></not></condition></fail>
      <fail><condition><not><equals arg1="${junit4.stats.ignores}"  arg2="0" /></not></condition></fail>
      <fail><condition><not><equals arg1="${junit4.stats.suites}"   arg2="1" /></not></condition></fail>
      <fail><condition><not><equals arg1="${junit4.stats.assumptions}" arg2="0" /></not></condition></fail>
      <fail><condition><not><equals arg1="${junit4.stats.suiteErrors}" arg2="0" /></not></condition></fail>
      <fail><condition><not><equals arg1="${junit4.stats.nonIgnored}"  arg2="1" /></not></condition></fail>
      <fail><condition><not><equals arg1="${junit4.stats.successful}"  arg2="false" /></not></condition></fail>      
    </sequential>
  </target>

  <target name="replicateSingleTest">
    <junit4:junit4 onNonEmptyWorkDirectory="wipe" 
        ifNoTests="fail" 
        haltonfailure="true" 
        parallelism="3"
        uniqueSuiteNames="false">
      <modulepath refid="tests.modulepath" />

      <listeners>
          <junit4:report-text showOutput="always" />
      </listeners>

      <fileset dir="${basedir}">
        <include name="**/TestSuiteReplicated.class" />
      </fileset>
    </junit4:junit4>
  </target>

  <target name="replicationAndBalancing">
    <junit4:junit4 onNonEmptyWorkDirectory="wipe" 
        ifNoTests="fail" 
        haltonfailure="true" 
        parallelism="3"
        uniqueSuiteNames="false">
      <modulepath refid="tests.modulepath" />

      <listeners>
          <junit4:report-text showOutput="always" />
      </listeners>

      <fileset dir="${basedir}">
        <include name="**/TestSuiteReplicated.class" />
        <include name="**/TestNonReplicated*.class" />
      </fileset>
    </junit4:junit4>
  </target>
  
  <target name="pseudoBalancing">
    <junit4:junit4 onNonEmptyWorkDirectory="wipe" 
        ifNoTests="fail" 
        haltonfailure="true" 
        parallelism="3"
        uniqueSuiteNames="false">
      <modulepath refid="tests.modulepath" />

      <listeners>
          <junit4:report-text showOutput="always" />
      </listeners>

      <fileset dir="${basedir}">
        <include name="**/TestPseudoLoadBalancing.class" />
      </fileset>
    </junit4:junit4>
  </target>

  <target name="stackoverflow">
    <junit4:junit4 onNonEmptyWorkDirectory="wipe" 
        haltonfailure="true" parallelism="1" 
        jvmoutputaction="pipe,ignore"
        debugstream="true"
        leavetemporary="true">
      <modulepath refid="tests.modulepath" />

      <fileset dir="${basedir}">
          <include name="**/StackOverflow*.class" />
      </fileset>
      
      <listeners>
          <junit4:report-text showOutput="always" showStatusOk="true" showSuiteSummary="true" />
      </listeners>      
    </junit4:junit4>
  </target>

  <target name="errorsSoFar">
    <junit4:junit4 onNonEmptyWorkDirectory="wipe" haltonfailure="false">
      <modulepath refid="tests.modulepath" />

      <fileset dir="${basedir}">
        <include name="**/TestStatuses.class" />
      </fileset>

      <listeners>
        <junit4:report-text showSuiteSummary="true">
        </junit4:report-text>
      </listeners>
    </junit4:junit4>
  </target>

  <target name="gh255">
    <junit4.preconf haltonfailure="false" dir="${basedir}">
      <jvmarg value="-Djava.security.manager" />
      <jvmarg value="-Djava.security.debug=domain,failure" />
      <jvmarg value="-Djava.security.policy=${basedir}/resources/test/security.policy" />

      <fileset dir="${basedir}">
        <include name="**/TestSecuritySandbox.class" />
      </fileset>
    </junit4.preconf>
  </target>
</project>
