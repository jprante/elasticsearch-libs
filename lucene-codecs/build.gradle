configurations {
    mains
    tests
}

dependencies {
    compile project(':lucene')
    testCompile project(':lucene-test-framework')
}

afterEvaluate {
    compileJava {
        inputs.property("moduleName", 'org.xbib.elasticsearch.lucene.codecs')
        doFirst {
            options.compilerArgs = [
                    '--module-path', classpath.asPath
            ]
            classpath = files()
        }
    }
    compileTestJava {
        inputs.property("moduleName", 'org.xbib.elasticsearch.lucene.codecs.test')
        doFirst {
            options.compilerArgs = [
                    '--module-path', classpath.asPath
            ]
            classpath = files()
        }
    }
    test {
        inputs.property("moduleName", 'org.xbib.elasticsearch.lucene.codecs.test')
        dependsOn 'jar', 'testJar'
        doFirst {
            classpath = files(configurations.testRuntime) + configurations.mains.artifacts.files + configurations.tests.artifacts.files
            jvmArgs = [
                    '--module-path', classpath.asPath,
                    '--add-modules', 'org.xbib.elasticsearch.lucene.codecs.test',
                    '--add-modules', 'org.xbib.elasticsearch.lucene.codecs'
            ]
            scanForTestClasses = false
            include "**/Test*.class"
        }
    }
    javadoc {
        inputs.property("moduleName", 'org.xbib.elasticsearch.lucene.codecs')
        doFirst {
            options.addStringOption('Xdoclint:none', '-quiet')
            options.addStringOption('-module-path', classpath.asPath)
            classpath = files()
        }
    }
}

task testJar(type: Jar) {
    group = 'build'
    from sourceSets.test.output
    classifier 'tests'
}

artifacts {
    mains jar
    tests testJar
    archives testJar
}

signing {
    sign testJar
}
